Batch size: 1024, input: Here is my prompt: Vertically Integrated Architecture (VIA) research group is affiliated with the School of Electrical Engineering, Department of Semiconductor System Engineering, Graduate School of Artificial Intelligence (AI), and Graduate School of AI Semiconductor at KAIST, South Korea. We conduct research in the domain of computer architecture with a vertically integrated approach. By co-optimizing VLSI technology, computer system architecture, and application & algorithms, our mission is to build a high-performance computing platform for future "intelligent" systems that are programmable, robust, reliable, secure, and energy-efficient. (Note) For students interested in undergraduate research internships or those who are applying to our research group for graduate studies, please send me an email with your latest CV and transcript
Traceback (most recent call last):
  File "/home/juntaek/prof_gaudi_gpu/gpu_llm/run_opt.py", line 133, in <module>
    run()
  File "/home/juntaek/prof_gaudi_gpu/gpu_llm/run_opt.py", line 83, in run
    output_tokens = model.generate(
                    ^^^^^^^^^^^^^^^
  File "/home/juntaek/miniconda3/envs/gaudi/lib/python3.11/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/juntaek/miniconda3/envs/gaudi/lib/python3.11/site-packages/transformers/generation/utils.py", line 2047, in generate
    result = self._sample(
             ^^^^^^^^^^^^^
  File "/home/juntaek/miniconda3/envs/gaudi/lib/python3.11/site-packages/transformers/generation/utils.py", line 3014, in _sample
    next_token_logits = outputs.logits.clone()[:, -1, :].float()
                        ^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 15.34 GiB. GPU 0 has a total capacity of 39.50 GiB of which 2.32 GiB is free. Including non-PyTorch memory, this process has 37.08 GiB memory in use. Of the allocated memory 21.22 GiB is allocated by PyTorch, and 15.37 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
